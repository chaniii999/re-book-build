name: Deploy Spring Boot Application with Docker

on:
  push:
    branches:
      - main  # 배포를 트리거할 브랜치

jobs:
  deploy:
    runs-on: ubuntu-22.04
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 4. Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 5. Docker Compose 설치
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # 6. Docker 로그인 (Docker Hub 또는 프라이빗 레지스트리)
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build project image
        run: docker build -t chani999/re_book:latest .
      - name: Push project image
        run: docker push chani999/re_book:latest

      # 7. Docker Compose 이미지 재빌드 및 실행
      - name: Build and start Docker containers with no cache
        run: |
          docker-compose -f docker-compose.yml up --build -d --no-cache

      # 8. Docker Hub에 이미지 푸시
      - name: Push Docker Image to Docker Hub
        run: |
          docker-compose -f docker-compose.yml push

      # 9. AWS EC2에 Docker 로그인 및 이미지 풀
      - name: SSH to EC2 and Pull Image
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}           # EC2 퍼블릭 IP
          username: ${{ secrets.EC2_USER }}       # EC2 사용자 (예: ubuntu)
          key: ${{ secrets.EC2_PRIVATE_KEY }}     # EC2 프라이빗 키
          script: |
            # 1. 최신 Docker 이미지 받기
            docker-compose -f docker-compose.yml pull
            # 2. 기존 컨테이너 중지 및 제거
            docker-compose down
            # 3. 태그없는 이미지 삭제
            docker image prune -f
            # 3. 새 컨테이너 빌드 및 실행
            docker-compose up -d
            # 4. 실행 상태 확인
            docker ps


